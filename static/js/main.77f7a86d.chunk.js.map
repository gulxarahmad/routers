{"version":3,"sources":["logo.svg","Header.js","Posts.js","Users.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","href","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","placeholder","Posts","useState","postData","setData","postId","setPostID","isLoading","setLoading","comments","setComments","loadComments","setLoadComments","useEffect","fetch","then","res","json","data","catch","err","console","log","class","title","body","onClick","alert","style","marginRight","ShowComments","map","m","name","email","Users","userData","userId","setUserId","posts","setPosts","loadPosts","setLoadPost","album","setAlbum","loadAlbum","setLoadAlbum","username","showAlbum","showPosts","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77f7a86d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","function Header() {\n\n return(\n     <>\n     <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n  <div className=\"container-fluid\">\n    <a className=\"navbar-brand\" href=\"/\">Home</a>\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n      <ul className=\"navbar-nav\">\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"/posts\">Posts</a>\n        </li>\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"/users\">Users</a>\n        </li>\n        \n      </ul>\n      <form className=\"d-flex\">\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n      </form>\n    </div>\n  </div>\n</nav>\n     {/* <ul>\n         <li> <a href='/posts'>Posts</a></li>\n         <li> <a href='/users'>Users</a></li>\n         </ul> */}\n     </>\n );\n    \n  }\n  \n  export default Header;","import {useState, useEffect} from 'react'\nfunction Posts() {\n\n    let [postData, setData] = useState(null);\n    let [postId, setPostID] = useState(1);\n    let [isLoading, setLoading] = useState(false);\n    let [comments, setComments]= useState([]);\n    let [loadComments, setLoadComments] = useState(false);\n  \n    const DataLoad = ()=>{\n      fetch(\"https://jsonplaceholder.typicode.com/posts/\"+postId).then(res=> res.json()).then(data=> {\n        setData(data); \n        setLoading(true);\n  \n      }).catch(err=>console.log(err));\n    }\n  \n    useEffect(()=>DataLoad(postId),[postId]);// jb UI bn jye gi tb react automatically useEffect ko load kry ga\n  \n  \n    const ShowComments = (postId)=>{\n      fetch(\"https://jsonplaceholder.typicode.com/comments/?postId=\"+postId).then(res=>res.json()).then(data=>\n      {setComments(data);\n      setLoadComments(true);\n      }).catch(err=>console.log(err));\n    \n  \n    }\n   // useEffect(ShowComments,[]);\n  \n    const nextPost = ()=>{\n  \n      setPostID(postId+1)\n      setLoading(false)\n      setLoadComments(false)\n  \n    }\n    const prevPost = ()=>{\n  \n      if (postId===1){\n        alert('There is No Previous Post')\n      }\n      else{\n        setPostID(postId-1)\n        setLoading(false)\n        setLoadComments(false)\n      }\n    }\n  \n    if(!isLoading){\n      return <h1>Loading....</h1>\n    }\n    else{\n    return (\n      \n      <>\n      <div class=\"card\">\n    <div className=\"card-header\">\n      Date From API\n    </div>\n    <div className=\"card-body\">\n      <h5 className=\"card-title\">Post ID:{postData.id}</h5>\n      <h5 className=\"card-title\">Post Title:{postData.title}</h5>\n      <p className=\"card-text\">Post Body: {postData.body}</p>\n      <a href=\"#\" class=\"btn btn-primary\" onClick={prevPost} style={{marginRight:10}}>Previous Post</a>\n      <a href=\"#\" class=\"btn btn-primary\" onClick={nextPost} style={{marginRight:10}}>Next Post</a>\n      <a href=\"#\" class=\"btn btn-primary\" onClick={()=>ShowComments(postData.id)}>Show Comments</a>\n    </div>\n  </div>\n  \n    <hr/>\n  \n      {\n      loadComments  &&  comments.map((m)=>(\n        <>\n  <div class=\"card\">\n    <div className=\"card-header\">\n      Post ID: {m.postId}\n      <hr/>\n     Name: {m.name}\n    </div>\n    <div className=\"card-body\">\n      <h5 className=\"card-title\">Comment ID:{m.id}</h5>\n      <h5 className=\"card-title\">Email: {m.email}</h5>\n      <p className=\"card-text\">Comment: {m.body}</p>\n    </div>\n  </div>\n        <hr/>\n        </>\n      ))\n      }\n  \n  \n     </>\n      \n    );\n  \n    }\n  \n    \n  }\n  \n  export default Posts;","import {useState, useEffect} from 'react'\nfunction Users() {\n\n    let [userData, setData] = useState(null);\n    let [userId, setUserId] = useState(1);\n    let [isLoading, setLoading] = useState(false);\n    let [posts, setPosts]= useState([]);\n    let [loadPosts, setLoadPost] = useState(false);\n    let [album, setAlbum] = useState([]);\n    let [loadAlbum, setLoadAlbum]=useState(false);\n  \n    const userLoad = ()=>{\n      fetch(\"https://jsonplaceholder.typicode.com/users/\"+userId).then(res=> res.json()).then(data=> {\n        setData(data); \n        setLoading(true);\n  \n      }).catch(err=>console.log(err));\n    }\n  \n    useEffect(()=>userLoad(userId),[userId]);// jb UI bn jye gi tb react automatically useEffect ko load kry ga\n  \n  \n\n   // useEffect(Showposts,[]);\n  \n    const nextUser = ()=>{\n  \n      setUserId(userId+1)\n      setLoading(false)\n      setLoadPost(false)\n      setLoadAlbum(false)\n  \n    }\n    const prevUser = ()=>{\n  \n      if (userId===1){\n        alert('There is No Previous Post')\n      }\n      else{\n        setUserId(userId-1)\n        setLoading(false)\n        setLoadPost(false)\n        setLoadAlbum(false)\n      }\n  \n    }\n\n    const showPosts = (userId)=>{\n        fetch(\"https://jsonplaceholder.typicode.com/posts/?userId=\"+userId).then(res=>res.json()).then(data=>\n        {setPosts(data);\n        setLoadAlbum(false);\n        setLoadPost(true);\n        }).catch(err=>console.log(err));\n    \n      }\n    const showAlbum = (userId)=>{\n        fetch(\"https://jsonplaceholder.typicode.com/albums/?userId=\"+userId).then(res=>res.json()).then(data=>\n        {setAlbum(data);\n        setLoadPost(false);   \n        setLoadAlbum(true);\n        }).catch(err=>console.log(err));\n    \n      }\n  \n    if(!isLoading){\n      return <h1>Loading....</h1>\n    }\n    else{\n    return (\n      \n      <>\n      <div class=\"card\">\n    <div className=\"card-header\">\n      Date From API\n    </div>\n    <div className=\"card-body\">\n      <h5 className=\"card-title\">User ID:{userData.id}</h5>\n      <h5 className=\"card-title\"> Name:{userData.name}</h5>\n      <p className=\"card-text\">Username: {userData.username}</p>\n      <p className=\"card-text\">Email: {userData.email}</p>\n      <a href=\"#\" class=\"btn btn-primary\" onClick={prevUser} style={{marginRight:10}}>Previous User</a>\n      <a href=\"#\" class=\"btn btn-primary\" onClick={nextUser} style={{marginRight:10}}>Next User</a>\n      <a href=\"#\" class=\"btn btn-primary\" onClick={()=>showAlbum(userData.id)} style={{marginRight:10}}>Show Album</a>\n      <a href=\"#\" class=\"btn btn-primary\" onClick={()=>showPosts(userData.id)}>Show Posts</a>\n    </div>\n  </div>\n  \n    <hr/>\n  \n      {\n      loadPosts &&  posts.map((m)=>(\n        <>\n  \n  <div class=\"card\">\n    <div className=\"card-header\">\n      User ID: {m.userId}\n      <hr/>\n     Post ID: {m.id}\n    </div>\n    <div className=\"card-body\">\n      <h5 className=\"card-title\">Post Title:{m.title}</h5>\n      <p className=\"card-text\">Comment: {m.body}</p>\n    </div>\n  </div>\n        <hr/>\n        </>\n      ))\n      }\n\n    {\n      loadAlbum &&  album.map((m)=>(\n        <>\n  \n  <div class=\"card\">\n    <div className=\"card-header\">\n      User ID: {m.userId}\n      <hr/>\n     Album ID: {m.id}\n    </div>\n    <div className=\"card-body\">\n      <h5 className=\"card-title\">Album Title:{m.title}</h5>\n    </div>\n  </div>\n        <hr/>\n        </>\n      ))\n      }\n  \n  \n     </>\n      \n    );\n  \n    }\n  \n    \n  }\n  \n  export default Users;","// Public Api\n// Data from Live Server\n\n\n// steps\n// https://jsonplaceholder.typicode.com/\n// understand API end points (from where to get data)\n// understand API format (format of the downloaded data- Data structure)\n\n\n\n\n\nimport logo from './logo.svg';\nimport './App.css';\nimport {useState, useEffect} from 'react';\n\n// function App() {\n\n//   const [postData, setData] = useState(null);\n//   const DataLoad = ()=>{\n//     fetch(\"https://jsonplaceholder.typicode.com/posts/1\").then(res=> res.json()).then(data=> setData(data)).catch(err=>console.log(err));\n//   }\n\n//   if (!postData){\n//     return <button onClick={DataLoad}> Load Data</button>\n//   }\n//   else{\n//   return (\n//     <>\n//    <h1>Data From API</h1>\n//   <h5>ID: {postData.id}</h5>\n//   <h5>Body: {postData.body}</h5>\n//   <h5>Title: {postData.title}</h5>\n//    </>\n//   );\n//   }\n// }\n\n// export default App;\n\n// function App() {\n\n//   let [postData, setData] = useState(null);\n//   let [postId, setPostID] = useState(1);\n//   let [isLoading, setLoading] = useState(false);\n//   let [comments, setComments]= useState(null);\n//   const DataLoad = ()=>{\n//     fetch(\"https://jsonplaceholder.typicode.com/posts/\"+postId).then(res=> res.json()).then(data=> {setData(data); setLoading(true);}).catch(err=>console.log(err));\n//   }\n\n//   useEffect(()=>DataLoad(postId),[postId]);// jb UI bn jye gi tb react automatically useEffect ko load kry ga\n\n//   const nextPost = ()=>{\n\n//     setPostID(postId+1)\n//     setLoading(false)\n\n//   }\n//   const ShowComments = ()=>{\n//     fetch(\"https://jsonplaceholder.typicode.com/comments/2\").then(res=>res.json()).then(data=>setComments(data)).catch(err=>console.log(err));\n  \n//   }\n\n//   if(!isLoading){\n//     return <h1>Loading....</h1>\n//   }\n//   else{\n//   return (\n    \n//     <>\n//    <h1>Data From API</h1>\n//   <h5>ID: {postData.id}</h5>\n//   <h5>Body: {postData.body}</h5>\n//   <h5>Title: {postData.title}</h5>\n//   <h5>User ID: {postData.userId}</h5>\n//   <button onClick={ShowComments}>Show Comments</button>\n  \n//   <hr/>\n\n//   <hr/>\n//   <button onClick={nextPost}>Next Post</button>\n\n  \n\n//    </>\n    \n//   );\n\n//   }\n  \n// }\n\n// export default App;\n\n\n\n\n// Implemented on Comments\n\n// function App() {\n\n//   let [postData, setData] = useState(null);\n//   let [postId, setPostID] = useState(1);\n//   let [isLoading, setLoading] = useState(false);\n//   let [comments, setComments]= useState(null);\n\n\n//   // jb UI bn jye gi tb react automatically useEffect ko load kry ga\n\n\n//   const ShowComments = ()=>{\n//     fetch(\"https://jsonplaceholder.typicode.com/comments/\").then(res=>res.json()).then(data=>setComments(data)).catch(err=>console.log(err));\n  \n//   }\n//   useEffect(ShowComments);\n\n//   if(!comments){\n//     return <h1>Loading....</h1>\n//   }\n//   else{\n//   return (\n    \n//   comments.filter(m=>m.postId===1).map(m=><h6>{m.id}</h6>)\n    \n//   );\n\n//   }\n  \n// }\n\n// export default App;\n\n\n\n// function App() {\n\n//   let [postData, setData] = useState(null);\n//   let [postId, setPostID] = useState(1);\n//   let [isLoading, setLoading] = useState(false);\n//   let [comments, setComments]= useState([]);\n//   let [filterComments, setFilterComments]=useState([]);\n\n//   const DataLoad = ()=>{\n//     fetch(\"https://jsonplaceholder.typicode.com/posts/\"+postId).then(res=> res.json()).then(data=> {\n//       setData(data); \n//       setLoading(true);\n\n//     }).catch(err=>console.log(err));\n//   }\n\n//   useEffect(()=>DataLoad(postId),[postId]);// jb UI bn jye gi tb react automatically useEffect ko load kry ga\n\n\n//   const ShowComments = ()=>{\n//     fetch(\"https://jsonplaceholder.typicode.com/comments/\").then(res=>res.json()).then(data=>setComments(data)).catch(err=>console.log(err));\n  \n//     var temp = comments.filter(function (m){\n//       return m.postId===1\n//     });\n//     setFilterComments(temp);\n//   }\n//   useEffect(ShowComments,[]);\n\n//   const nextPost = ()=>{\n\n//     setPostID(postId+1)\n//     setLoading(false)\n\n//     var temp = comments.filter(function (m){\n//       return m.postId===postId+1\n//     });\n//     console.log('temp: ', temp)\n//     setFilterComments(temp);\n//   }\n\n//   if(!isLoading){\n//     return <h1>Loading....</h1>\n//   }\n//   else{\n//   return (\n    \n//     <>\n//    <h1>Data From API</h1>\n//   <h5>Post ID: {postData.id}</h5>\n//   <h5>Body: {postData.body}</h5>\n//   <h5>Title: {postData.title}</h5>\n//   <h5>User ID: {postData.userId}</h5>\n//   <button>Show Comments</button>\n\n//     {\n//     filterComments.map((m)=>(\n//       <>\n//       <h6>Comment ID:{m.id}</h6>\n//       <h6>{m.body}</h6>\n//       </>\n//     ))\n//     }\n//   <hr/>\n//   <button onClick={nextPost}>Next Post</button>\n\n//    </>\n    \n//   );\n\n//   }\n\n  \n// }\n\n// export default App;\n\n\n// function App() {\n\n//   let [postData, setData] = useState(null);\n//   let [postId, setPostID] = useState(1);\n//   let [isLoading, setLoading] = useState(false);\n//   let [comments, setComments]= useState([]);\n//   let [loadComments, setLoadComments] = useState(false);\n\n//   const DataLoad = ()=>{\n//     fetch(\"https://jsonplaceholder.typicode.com/posts/\"+postId).then(res=> res.json()).then(data=> {\n//       setData(data); \n//       setLoading(true);\n\n//     }).catch(err=>console.log(err));\n//   }\n\n//   useEffect(()=>DataLoad(postId),[postId]);// jb UI bn jye gi tb react automatically useEffect ko load kry ga\n\n\n//   const ShowComments = ()=>{\n//     fetch(\"https://jsonplaceholder.typicode.com/comments/\").then(res=>res.json()).then(data=>\n//     {setComments(data);\n//     setLoadComments(true);\n//     }).catch(err=>console.log(err));\n  \n\n//   }\n//  // useEffect(ShowComments,[]);\n\n//   const nextPost = ()=>{\n\n//     setPostID(postId+1)\n//     setLoading(false)\n//     setLoadComments(false)\n\n//   }\n//   const prevPost = ()=>{\n\n//     if (postId===1){\n//       alert('There is No Previous Post')\n//     }\n//     else{\n//       setPostID(postId-1)\n//       setLoading(false)\n//       setLoadComments(false)\n//     }\n\n    \n\n\n//   }\n\n//   if(!isLoading){\n//     return <h1>Loading....</h1>\n//   }\n//   else{\n//   return (\n    \n//     <>\n//     <div class=\"card\">\n//   <div className=\"card-header\">\n//     Date From API\n//   </div>\n//   <div className=\"card-body\">\n//     <h5 className=\"card-title\">Post ID:{postData.id}</h5>\n//     <h5 className=\"card-title\">Post Title:{postData.title}</h5>\n//     <p className=\"card-text\">Post Body: {postData.body}</p>\n//     <a href=\"#\" class=\"btn btn-primary\" onClick={prevPost} style={{marginRight:10}}>Previous Post</a>\n//     <a href=\"#\" class=\"btn btn-primary\" onClick={nextPost} style={{marginRight:10}}>Next Post</a>\n//     <a href=\"#\" class=\"btn btn-primary\" onClick={ShowComments}>Show Comments</a>\n//   </div>\n// </div>\n\n//   <hr/>\n\n//     {\n//     loadComments &&  comments.filter((m)=>(\n//       m.postId===postData.id\n//     )).map((m)=>(\n//       <>\n\n// <div class=\"card\">\n//   <div className=\"card-header\">\n//     Post ID: {m.postId}\n//     <hr/>\n//    Name: {m.name}\n//   </div>\n//   <div className=\"card-body\">\n//     <h5 className=\"card-title\">Comment ID:{m.id}</h5>\n//     <h5 className=\"card-title\">Email: {m.email}</h5>\n//     <p className=\"card-text\">Comment: {m.body}</p>\n//   </div>\n// </div>\n//       <hr/>\n//       </>\n//     ))\n//     }\n\n\n//    </>\n    \n//   );\n\n//   }\n\n  \n// }\n\n// export default App;\n\nimport Header from './Header';\nimport Posts from './Posts';\nimport Users from './Users'\nimport {Switch, Route, BrowserRouter, HashRouter} from 'react-router-dom';\n\nfunction App() {\n\n  return(\n    <BrowserRouter>\n    <>\n    <Header/>\n\n    <Switch>\n      <Route path='/posts'><Posts/></Route>\n      <Route path='/users'><Users/></Route>\n\n      </Switch>\n    </>\n    </BrowserRouter>\n  )\n\n  \n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}